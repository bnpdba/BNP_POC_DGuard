---
 - hosts: "{{ ctlhost }}"
   name: "01_IMGtoVM Create/replace VM:{{ dsthost }} and configure it"
   vars_files:
     - "/home/ansible/BNP/ORAPROV_ANSIBLE/vars/prepoc.global.yml"

   become: yes
   become_user: "{{ root_user }}"

   environment:
     - LIBGUESTFS_BACKEND: direct
     - LIBVIRT_DEFAULT_URI: qemu:///system

   tasks:

   - name: "Try starting this VM : {{ dsthost }}"
     virt:
       name: "{{ dsthost }}"
       command: status
       state: running
       uri: qemu:///system
     ignore_errors: yes
     register: vmstart

   - name: "Is this domain {{ dsthost }} running , existing..."
     command: "virsh --connect qemu:///system dominfo {{ dsthost }}"
     ignore_errors: yes

   - name: "Status of the new VM : {{ dsthost }}"
     virt: 
       name: "{{ dsthost }}"
       command: status 
       uri: qemu:///system
     ignore_errors: yes

   - name: "Shutdown and undefine (remove) any pre-existing VM:{{ dsthost }}"
     command: "virsh --connect qemu:///system {{ item }} {{ dsthost }}"
     with_items:     
       - shutdown
       - undefine
     ignore_errors: yes

   - name: "Remove leftover orphans from previous VM-creations"
     shell: |
       rm -rf {{ vm_dir }}

   - name: "(Re-)create the new VM-directory \"{{ vm_dir }}\" "
     file:
       path: "{{ vm_dir }}"
       state: directory

   - name: "Push RHEL7.9 image to the hypervisor:{{ vm_system_full }} to {{ vm_dir }}"
     copy:
       src: "{{ item.sourc }}"
       dest: "{{ item.dest }}"
       owner: "{{ item.username }}"
       group: "{{ item.group }}"
       mode: u=rw,g=r,o=r
     with_items:
       - { username: "{{ root_user }}" , group: "{{ root_group }}" , sourc: "{{ vm_qcow2 }}", dest: "{{ vm_dir }}" }

   - name: Get status about system VM_files
     stat: 
       path: "{{ vm_system_full }}"
     register: ospresent

   - name: "Extending New VM:{{ dsthost }} with {{ vm_extension }} , giving more capacity on the root-partition "
     shell:
       cmd: qemu-img resize "{{ vm_system_full }}" "{{ vm_extension }}"
     when: ospresent.stat.exists

   - name: "Grow the root-partition of the VM:{{ dsthost }} with {{ vm_extension }}"
     shell:
       cmd: virt-filesystems --long -h --all -a "{{ vm_system_full }}" 
     when: ospresent.stat.exists

   - name: "All VM-disks VM-filesystems are of type XFS , let's grow system-partition"
     shell:
       cmd: virt-customize -a "{{ vm_system_full }}" --run-command 'growpart "{{ pv_system }}" 1'
     when: ospresent.stat.exists

   - name: "All VM-disks/VM-filesystems are of type XFS , let's grow system-partition : xfs_growfs on {{ dsthost }}"
     shell:
       cmd: virt-customize -a "{{ vm_system_full }}" --run-command 'xfs_growfs /'
     when: ospresent.stat.exists

   - name: "Resetting the default root_password on the qcow2-system-image:{{ vm_system_full }}"
     shell: |
       virt-customize --connect qemu:///system -a {{ vm_system_full }} --root-password password:{{ slussel_temp }}
     when: 
       - ospresent.stat.exists

   - name: "Now effectively deploy the VM:{{ dsthost }}"
     command: >
       virt-install --connect qemu:///system \
                    --name {{ dsthost }} \
                    --os-type {{ vm_family }} \
                    --ram {{ vm_memory }} \
                    --vcpus {{ vm_cpu }} \
                    --network {{ vm_net_eth0 }} \
                    --virt-type {{ vm_type }} \ 
                    --import \
                    --disk {{ vm_system }} \
                    --controller {{ vm_disktype }} \
                    --disk {{ vm_tmp }} \
                    --disk {{ vm_swap }} \
                    --disk {{ vm_orasoft }} \
                    --disk {{ vm_oradata }} \
                    --os-variant {{ vm_distrib }} \
                    --noautoconsole \
                    --check all=off 
     when: 
       - ospresent.stat.exists

   - name: "Get status about non System_VM_files like oradata,orasoft,etc.."
     register: check_vmfile
     stat:
       path: "{{ item }}"
     with_items:
       - "{{ vm_tmp_full }}"
       - "{{ vm_swap_full }}"
       - "{{ vm_orasoft_full }}"
       - "{{ vm_oradata_full }}"

#   - debug:
#       msg: 'file name {{item.item}} exists'
#     with_items: "{{ check_vmfile.results }}"
#     when: item.stat.exists

   - name: "Attach Virtual-network {{ vm_net_source }} with MAC {{ vm_mac }}"
     command: > 
       virsh attach-interface --domain {{ dsthost }} \
                              --type bridge \
                              --source virbr1 \
                              --model virtio \
                              --mac {{ vm_mac_eth1 }} \
                              --config \
                              --live
     when: 
       - ospresent.stat.exists
